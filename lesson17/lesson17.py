# === Урок 17: Работа с файлами ===
from kivy.tools.pep8checker.pep8 import break_around_binary_operator

# Что такое файлы и зачем с ними работать:
# Файл — это внешний источник хранения информации. Python позволяет читать, записывать и обрабатывать файлы.

# Открытие файла:
# Синтаксис: open("имя_файла", "режим", encoding="utf-8")
# Режимы:
# 'r' — только чтение
# 'w' — перезапись (удаляет содержимое)
# 'a' — добавление в конец
# 'x' — создаёт новый файл, ошибка если уже существует
# 'b' — бинарный режим

# Пример:
# with open("example.txt", "r", encoding="utf-8") as file: #encoding="utf-8" не обезательно писать
#     content = file.read()
#     print(content)
#("../homework1.py" , "r") переход на один уровень выше / выше папки
#. текущий уровень
# Запись в файл:
#
# with open("output.txt", "w", encoding="utf-8") as file:
#     file.write("Это строка.\nНовая строка \n")
#
# #
# # # Добавление в файл:
# #
# with open("output.txt", "a", encoding="utf-8") as file:
#     file.write("Добавленная строка\n")
# while True:
#     name = input("Имя: ")
#     if name == "":
#         break
#     password = input("пороль: ")
#
#
#
#     with open("legger.txt", "a", encoding="utf-8") as file:
#         file.write(f"{name}{password} just checked in.\n")
#


# # Чтение построчно:
#
# with open("example.txt", "r", encoding="utf-8") as file:
#     for line in file:
#         print(line.strip())
#         break

# with open("legger.txt", "r", encoding="uts-8") as file: #считывание с других файлов
#     d ={}
#     for line in file:
#         data = line.strip().split("")
#         d[data[0]] = data[1]
#
# print(d)
# # Чтение в список:
#
# with open("example.txt", "r", encoding="utf-8") as file:
#     lines = file.readlines()
#     print(lines)

# --- Ознакомительные задачи (10) ---

# 1. Запроси у пользователя имя файла и выведи его содержимое.
# filename = input("enter file name: ")
# with open(filename, "r") as file:
#     print(file.read)
# 2. Напиши функцию, которая запрашивает строку и сохраняет её в файл.
# s = input("Запрос строки: ")
# with open("output.txt", "w", encoding="utf-8") as file:
#     file.write(f"{s},\n")


# 3. Запиши 5 введённых пользователем чисел в файл.
with open("output.txt" "w", encoding="utf-8") as file:
    numbers = range(1,6)
    numbers= int(input("Число: "))
print(numbers)

# 4. Считай файл построчно и выведи строки в верхнем регистре.
# 5. Запроси имя и возраст и сохрани в файл в формате словаря.
# 6. Прочитай файл и посчитай количество строк.
# 7. Проверь, существует ли файл. Если да — удали его (используй os.remove()).
# 8. Запроси путь к файлу у пользователя и выведи его абсолютный путь.
# 9. Запиши список чисел в файл с помощью цикла.
# 10. Используй try/except при открытии файла и выведи сообщение об ошибке.

# --- Домашнее задание (40 задач) ---

# 1. Напиши функцию, которая запрашивает 3 строки от пользователя и записывает их в файл.
# 2. Реализуй программу, которая проверяет, существует ли файл, прежде чем его открыть.
# 3. Считай из файла список имён и отсортируй их по алфавиту.
# 4. Создай меню: 1 — прочитать файл, 2 — записать файл, 3 — выйти.
# 5. Пользователь вводит числа, программа сохраняет только чётные в файл.
# 6. Запроси путь до файла и выведи, сколько в нём символов.
# 7. Прочитай файл, преобразуй строки в заглавные и сохрани в другой файл.
# 8. Создай лог-файл, куда записываются все действия пользователя.
# 9. Объедини содержимое двух файлов, имена которых вводит пользователь.
# 10. Введи список слов и сохрани их как строку в файл.

# 11. Запроси у пользователя строку и запиши в файл с именем по его выбору.
# 12. Реализуй функцию, которая удаляет файл, если он существует.
# 13. Запроси от пользователя имя и возраст, сохрани как JSON-строку.
# 14. Преобразуй все строки файла в список и посчитай сумму длин строк.
# 15. Раздели файл пополам: первые строки в один файл, остальные — в другой.
# 16. Сохрани в файл только те строки, которые длиннее 15 символов.
# 17. Реализуй обработку исключений при открытии несуществующего файла.
# 18. Введи список чисел и запиши их в файл, каждое на новой строке.
# 19. Прочитай файл и выведи строки, содержащие слово «python».
# 20. Введи строку и сохрани её в файл, название которого — текущая дата (используй datetime).

# 21. Выведи количество слов в файле.
# 22. Используй pathlib для создания папки, если её нет, и сохрани туда файл.
# 23. Запроси от пользователя строку и запиши её в конец существующего файла.
# 24. Сохрани в файл словарь (ключ — слово, значение — длина).
# 25. Считай все строки, содержащие числа, и запиши их в отдельный файл.
# 26. Выведи последние 5 строк файла.
# 27. Сравни два файла и выведи, какие строки в них отличаются.
# 28. Введи число N и запиши таблицу умножения на N в файл.
# 29. Прочитай файл и запиши строки в обратном порядке.
# 30. Создай логгер: при каждом запуске программы пишется отметка времени.

# 31. Введи 5 слов, отсортируй по длине и запиши в файл.
# 32. Прочитай строки из файла и выведи только уникальные.
# 33. Введи список имён и сохрани их как строки в файл через запятую.
# 34. Создай файл, где каждая строка — результат функции input().
# 35. Преобразуй содержимое файла в список словарей.
# 36. Прочитай файл в бинарном режиме и выведи размер в байтах.
# 37. Напиши функцию, проверяющую, является ли файл пустым.
# 38. Введи строку и число N — запиши строку N раз в файл.
# 39. Прочитай строку и выведи, сколько раз встречается каждая буква.
# 40. Создай 3 файла с текстами, а затем собери их в один файл-результат.
