### Урок 5: Списки в Python

# 1. Введение в списки
# - Что такое список?
# - Отличие списка от других типов данных
# - Синтаксис создания списков

# 2. Индексация и доступ к элементам
# - Доступ по индексу
# - Отрицательные индексы
# - Изменение элементов списка

# 3. Основные операции со списками
# - Длина списка (len())
# - Конкатенация списков (+)
# - Дублирование элементов (*)
# - Проверка вхождения (in)

# 4. Методы списков
# - append(), insert() – добавление элементов
# - remove(), pop() – удаление элементов
# - index(), count() – поиск элементов
# - sort(), reverse() – сортировка и разворот

# 5. Срезы списков
# - Получение подсписков

# 7. Вложенные списки
# - Создание двумерных списков
# - Доступ к элементам вложенного списка


# Список (list) – это упорядоченная изменяемая коллекция элементов.

# Пример списка
fruits = ["яблоко", "банан", "апельсин"]
print(fruits[0])  # яблоко

# Списки могут содержать разные типы данных
mixed_list = [42, "hello", 3.14, [1, 2, 3]]
print(mixed_list[3][1])  # Доступ ко второму элементу вложенного списка → 2

# ---- Задачи для закрепления ----

# 1. Создание и работа со списками
# Создай список с 5 любимыми блюдами и выведи третий элемент.

# 2. Индексация
# Дан список чисел [10, 20, 30, 40, 50].
# Используя индексы, замени 30 на 99 и выведи список.

# 3. Операции со списками
# Создай два списка: ["a", "b", "c"] и [1, 2, 3]. 
# Объедини их в один и выведи результат.

# 4. Методы списка
# Дан список [4, 2, 9, 1].
# - Добавь 7 в конец.
# - Удали 2.
# - Отсортируй список.
# - Выведи результат.

# 5. Работа со срезами
# Дан список ["python", "java", "c++", "javascript", "php"].
# - Выведи первые три элемента.
# - Выведи список в обратном порядке.

# 6. Итерация по списку
# Дан список имен ["Аня", "Борис", "Вика"]. Используя for, 
# выведи приветствие для каждого:
# > Привет, Аня!
# > Привет, Борис!
# > Привет, Вика!

# 7. Вложенные списки
# Дан список [[1, 2], [3, 4], [5, 6]]. 
# Выведи 4, обратившись к элементу по индексу.

# ---- Заключение ----
# - Списки – мощный инструмент в Python.
# - Позволяют хранить и изменять данные.
# - Множество методов помогают работать с элементами эффективно.
